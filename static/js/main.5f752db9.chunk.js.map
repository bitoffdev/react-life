{"version":3,"sources":["life.ts","LifeCanvas.tsx","LoadFileModal.tsx","LoadUrlModal.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Game","livingCells","this","Set","column","row","has","k","delete","add","isLiving","count","i","j","getCell","text","width","height","columnOrigin","rowOrigin","x","y","sequence","split","line","length","pieces","tokens","map","trim","parseInt","Math","floor","matches","match","entries","iter","setCell","blob","then","loadText","neighborCounts","Map","incrCount","addend","set","get","forEach","coordinateKey","coordinate","countOfNeighbors","console","error","render","canvasRef","game","cellPixelWidth","canvasDom","current","context","getContext","canvas","numberOfColumns","max","numberOfRows","lowestColumn","lowestRow","fillStyle","fillRect","LifeCanvas","props","useState","setLifeInterval","useRef","size","setSize","ref","useResizeObserver","onResize","useEffect","lifeInterval","clearInterval","isRunning","setInterval","next","intervalMillis","className","style","maxWidth","overflow","minHeight","flex","LoadFileModal","selectedFileName","setSelectedFileName","inputRef","Modal","show","onHide","onClose","Header","closeButton","Title","Body","Form","File","id","label","onChange","fileInputDom","files","file","name","changeFile","custom","Footer","Button","variant","onClick","loadBlob","slice","loadFile","LoadUrlModal","isLoading","setIsLoading","setError","url","setUrl","loadUrl","useCorsAnywhere","fetch","result","catch","message","finally","Alert","Link","value","Group","controlId","Label","Control","type","placeholder","event","target","href","disabled","Spinner","as","animation","role","aria-hidden","marginLeft","App","setGame","setCellPixelWidth","setIntervalMillis","setIsRunning","isFileModalVisible","setIsFileModalVisible","isUrlModalVisible","setIsUrlModalVisible","a","_game","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","inline","InputGroup","Prepend","Text","FormControl","Append","icon","faClock","millis","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f752db9.chunk.js","sourcesContent":["export default class Game {\n  livingCells: Set<string>;\n\n  constructor() {\n    this.livingCells = new Set();\n  }\n\n  getCell(column: number, row: number): boolean {\n    return this.livingCells.has(`${column}:${row}`);\n  }\n\n  flipCell(column: number, row: number) {\n    const k = `${column}:${row}`;\n    if (this.livingCells.has(k)) this.livingCells.delete(k);\n    else this.livingCells.add(k);\n  }\n\n  setCell(column: number, row: number, isLiving: boolean) {\n    const k = `${column}:${row}`;\n    if (isLiving) this.livingCells.add(k);\n    else this.livingCells.delete(k);\n  }\n\n  countLivingNeighbors(column: number, row: number): number {\n    let count = 0;\n    for (let i = column - 1; i <= column + 1; i++)\n      for (let j = row - 1; j <= row + 1; j++)\n        count += this.getCell(i, j) ? 1 : 0;\n    return count;\n  }\n\n  loadText(text: string) {\n    // reset the board\n    this.livingCells = new Set();\n\n    let width = 0;\n    let height = 0;\n    let columnOrigin = 0;\n    let rowOrigin = 0;\n    let x = 0;\n    let y = 0;\n    let sequence = 1;\n\n    for (let line of text.split(\"\\n\")) {\n      // skip comments\n      if (line.length >= 1 && line[0] === \"#\") continue;\n      const pieces = line.split(\",\");\n      if (pieces.length > 1) {\n        for (let piece of pieces) {\n          const tokens = piece.split(\"=\").map((x) => x.trim());\n          if (tokens.length !== 2) continue;\n          if (tokens[0] === \"x\") {\n            width = parseInt(tokens[1]);\n            columnOrigin = -Math.floor(width / 2);\n          }\n          if (tokens[0] === \"y\") {\n            height = parseInt(tokens[1]);\n            rowOrigin = -Math.floor(height / 2);\n          }\n        }\n      } else {\n        const regex = /[0-9]+|b|o|\\$/gm;\n        const matches = line.match(regex);\n        if (!matches) continue;\n\n        for (let [, match] of matches.entries()) {\n          if (match === \"b\") {\n            x += sequence;\n            sequence = 1;\n          } else if (match === \"o\") {\n            for (let iter = x; iter < x + sequence; iter++)\n              this.setCell(columnOrigin + iter, rowOrigin + y, true);\n            x += sequence;\n            sequence = 1;\n          } else if (match === \"$\") {\n            y += sequence;\n            x = 0;\n            sequence = 1;\n          } else {\n            sequence = parseInt(match);\n          }\n        }\n      }\n    }\n  }\n\n  async loadBlob(blob: Blob) {\n    return await blob.text().then((text) => this.loadText(text));\n  }\n\n  next() {\n    const neighborCounts = new Map<string, number>();\n\n    const incrCount = (column: number, row: number, addend: number) =>\n      neighborCounts.set(\n        `${column}:${row}`,\n        (neighborCounts.get(`${column}:${row}`) ?? 0) + addend\n      );\n\n    // generate the `neighborCounts` map\n    this.livingCells.forEach((coordinateKey) => {\n      const [column, row] = coordinateKey\n        .split(\":\")\n        .map((coordinate) => parseInt(coordinate));\n\n      // make sure this living cell exists in neighborCounts so it will get updated if it has 0 neighbors\n      incrCount(column, row, 0);\n\n      // increment the 8 neighbors of this living cell\n      for (let i = -1; i < 2; i++)\n        for (let j = -1; j < 2; j++)\n          if (i !== 0 || j !== 0) incrCount(column + i, row + j, 1);\n    });\n\n    // flip the cells\n    neighborCounts.forEach((countOfNeighbors, coordinateKey) => {\n      switch (countOfNeighbors) {\n        case 2:\n          break;\n        case 3:\n          this.livingCells.add(coordinateKey);\n          break;\n        case 0:\n        case 1:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n          this.livingCells.delete(coordinateKey);\n          break;\n        default:\n          console.error(\n            `Unexpected count of neighbors: ${countOfNeighbors} for coordinate ${coordinateKey}`\n          );\n      }\n    });\n  }\n}\n","import { useEffect, useRef, useState } from \"react\";\n\nimport Game from \"./life\";\nimport useResizeObserver from \"use-resize-observer\";\n\ninterface LifeCanvasProps {\n  cellPixelWidth: number;\n  className?: string;\n  game: Game | null;\n  intervalMillis: number;\n  isRunning: boolean;\n}\n\nconst render = (\n  canvasRef: React.RefObject<HTMLCanvasElement | null>,\n  game: Game | null,\n  cellPixelWidth: number\n) => {\n  if (!game) return;\n\n  const canvasDom = canvasRef.current;\n  const context = canvasDom?.getContext(\"2d\");\n  if (context == null) return;\n\n  const width = context.canvas.width;\n  const height = context.canvas.height;\n  const numberOfColumns = Math.max(1, Math.floor(width / cellPixelWidth));\n  const numberOfRows = Math.max(1, Math.floor(height / cellPixelWidth));\n\n  const lowestColumn = -Math.floor(numberOfColumns / 2);\n  const lowestRow = -Math.floor(numberOfRows / 2);\n\n  for (let row = lowestRow; row <= lowestRow + numberOfRows; row++) {\n    for (\n      let column = lowestColumn;\n      column <= lowestColumn + numberOfColumns;\n      column++\n    ) {\n      context.fillStyle = game.getCell(column, row)\n        ? \"rgb(0,0,0)\"\n        : \"rgb(255,255,255)\";\n      context.fillRect(\n        (column - lowestColumn) * cellPixelWidth,\n        (row - lowestRow) * cellPixelWidth,\n        cellPixelWidth,\n        cellPixelWidth\n      );\n    }\n  }\n};\n\nexport default function LifeCanvas(props: LifeCanvasProps) {\n  const { cellPixelWidth } = props;\n\n  const [, setLifeInterval] = useState<NodeJS.Timeout | null>(null);\n  // note: the initialValue of null must be passed to useRef for typescript\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/35572#issuecomment-498242139\n  // const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [size, setSize] = useState<{ width?: number; height?: number }>({\n    width: 200,\n    height: 200,\n  });\n  const { ref } = useResizeObserver<HTMLDivElement>({\n    onResize: (size) => setSize(size),\n  });\n\n  // do a single render when the game changes or the canvas size changes\n  useEffect(() => render(canvasRef, props.game, cellPixelWidth), [\n    cellPixelWidth,\n    props.game,\n    size,\n  ]);\n\n  // Only update when the props change. Don't update when the state changes.\n  useEffect(\n    () =>\n      setLifeInterval((lifeInterval) => {\n        // clear the previous interval\n        if (lifeInterval) clearInterval(lifeInterval);\n        // skip creating a new interval if we are not supposed to be running\n        if (props.game == null || !props.isRunning) return null;\n        // set a new interval\n        return setInterval(function () {\n          props.game?.next();\n          render(canvasRef, props.game, props.cellPixelWidth);\n        }, props.intervalMillis);\n      }),\n    [canvasRef, props]\n  );\n\n  return (\n    <div\n      className={props.className}\n      ref={ref}\n      style={{\n        maxWidth: \"100%\",\n        overflow: \"hidden\",\n        minHeight: \"100px\",\n        flex: 1,\n      }}\n    >\n      <canvas ref={canvasRef} width={size.width} height={size.height} />\n    </div>\n  );\n}\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useRef, useState } from \"react\";\n\ninterface LoadFileModalProps {\n  show: boolean;\n  loadBlob: (blob: Blob) => void;\n  onClose: () => void;\n}\n\nexport default function LoadFileModal(props: LoadFileModalProps) {\n  const [selectedFileName, setSelectedFileName] = useState<string | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const changeFile = () => {\n    const fileInputDom = inputRef.current;\n    if (!fileInputDom) return;\n    if (fileInputDom.files == null || fileInputDom.files.length === 0) return;\n    const file = fileInputDom.files[0];\n    setSelectedFileName(file.name);\n  };\n\n  const loadFile = () => {\n    const fileInputDom = inputRef.current;\n    if (!fileInputDom) return;\n\n    if (fileInputDom.files == null || fileInputDom.files.length === 0) return;\n    const file = fileInputDom.files[0];\n    props.loadBlob(file.slice());\n  };\n\n  return (\n    <Modal show={props.show} onHide={props.onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Modal heading</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.File\n            id=\"custom-file\"\n            label={selectedFileName ?? \"Choose File\"}\n            ref={inputRef}\n            onChange={() => changeFile()}\n            custom\n          />\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={props.onClose}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={() => loadFile()}>\n          Save Changes\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { Alert, Button, Form, Modal, Spinner } from \"react-bootstrap\";\nimport { useRef, useState } from \"react\";\n\ninterface LoadUrlModalProps {\n  show: boolean;\n  // called when a blob is successfully retrieved from the user-provided URL\n  loadBlob: (blob: Blob) => void;\n  // called when a user initiates closing the modal\n  onClose: () => void;\n}\n\nexport default function LoadUrlModal(props: LoadUrlModalProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState<string>(\"\");\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const loadUrl = (url: string, useCorsAnywhere?: boolean) => {\n    setError(null);\n    setIsLoading(true);\n    fetch(useCorsAnywhere ? `http://cors-anywhere.herokuapp.com/${url}` : url)\n      .then((result) => result.blob())\n      .then(props.loadBlob)\n      .catch((error) => {\n        setError(error.message);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <Modal show={props.show} onHide={props.onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Load Game from URL</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {error && (\n          <Alert variant=\"danger\">\n            {error}\n            <br />\n            <Alert.Link\n              onClick={() => loadUrl(inputRef.current?.value ?? \"\", true)}\n            >\n              Click here to again with CORS Anywhere (Insecure).\n            </Alert.Link>\n          </Alert>\n        )}\n        <Form>\n          <Form.Group controlId=\"exampleForm.ControlInput1\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"http://example.org\"\n              ref={inputRef}\n              value={url}\n              onChange={(event) => setUrl(event.target.value)}\n            />\n          </Form.Group>\n        </Form>\n        <Button\n          href=\"#\"\n          onClick={() => setUrl(\"/api/v1/objects/r-pentamino.rle\")}\n        >\n          Example 1\n        </Button>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={props.onClose}>\n          Close\n        </Button>\n        <Button\n          variant=\"primary\"\n          onClick={() => loadUrl(inputRef.current?.value ?? \"\", false)}\n          disabled={isLoading}\n        >\n          {isLoading ? (\n            <>\n              <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n              <span style={{ marginLeft: \"5px\" }}>Loading...</span>\n            </>\n          ) : (\n            \"Load URL\"\n          )}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { ChangeEvent, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  InputGroup,\n  Nav,\n  Navbar,\n  NavDropdown,\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport { ButtonVariant } from \"react-bootstrap/esm/types\";\n\nimport Game from \"./life\";\nimport LifeCanvas from \"./LifeCanvas\";\nimport LoadFileModal from \"./LoadFileModal\";\nimport LoadUrlModal from \"./LoadUrlModal\";\n\nconst outlineDanger: ButtonVariant = \"outline-danger\";\nconst outlineSuccess: ButtonVariant = \"outline-success\";\n\nfunction App() {\n  const [game, setGame] = useState<Game | null>(null);\n  const [cellPixelWidth, setCellPixelWidth] = useState(50);\n  const [intervalMillis, setIntervalMillis] = useState(100);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isFileModalVisible, setIsFileModalVisible] = useState(false);\n  const [isUrlModalVisible, setIsUrlModalVisible] = useState(false);\n\n  const toggleIsRunning = () => setIsRunning((isRunning) => !isRunning);\n  const sanitizeIntervalMillis = (millis: string) =>\n    Math.max(1, parseInt(millis));\n\n  const loadRPentamino = () => {\n    const game = new Game();\n    game.setCell(2, 2, true);\n    game.setCell(3, 2, true);\n    game.setCell(2, 3, true);\n    game.setCell(1, 3, true);\n    game.setCell(2, 4, true);\n    // turn off the game before we create the new one\n    setIsRunning(false);\n    setGame(game);\n  };\n\n  const loadBlob = async (blob: Blob) => {\n    setIsFileModalVisible(false);\n    setIsUrlModalVisible(false);\n\n    const _game = new Game();\n    await _game.loadBlob(blob);\n    // turn off the game before we create the new one\n    setIsRunning(false);\n    setGame(_game);\n  };\n\n  const onChangeCellPixelWidth = (event: ChangeEvent<HTMLInputElement>) => {\n    setCellPixelWidth(Math.max(1, parseInt(event.target.value)));\n  };\n\n  const onChangeInterval = (event: ChangeEvent<HTMLInputElement>) => {\n    // pause the game while the user is adjust input so the game doesn't strangely speed up and slow down\n    setIsRunning(false);\n    setIntervalMillis(sanitizeIntervalMillis(event.target.value));\n  };\n\n  return (\n    <>\n      <LoadFileModal\n        show={isFileModalVisible}\n        loadBlob={loadBlob}\n        onClose={() => setIsFileModalVisible(false)}\n      />\n      <LoadUrlModal\n        show={isUrlModalVisible}\n        loadBlob={loadBlob}\n        onClose={() => setIsUrlModalVisible(false)}\n      />\n      <div className=\"d-flex flex-column\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">React-Life</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item onClick={loadRPentamino}>\n                  R-Pentamino\n                </NavDropdown.Item>\n              </NavDropdown>\n              <NavDropdown title=\"Load\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item onClick={() => setIsUrlModalVisible(true)}>\n                  From URL\n                </NavDropdown.Item>\n                <NavDropdown.Item onClick={() => setIsFileModalVisible(true)}>\n                  From File\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n            <Form inline>\n              <InputGroup className=\"mr-sm-2\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"btnGroupAddon2\">\n                    Cell Size\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  type=\"number\"\n                  onChange={onChangeCellPixelWidth}\n                  value={cellPixelWidth}\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text>px</InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n              <InputGroup className=\"mr-sm-2\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"btnGroupAddon2\">\n                    <FontAwesomeIcon icon={faClock} />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  type=\"number\"\n                  onChange={onChangeInterval}\n                  value={intervalMillis}\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text>ms</InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n              <Button\n                onClick={toggleIsRunning}\n                variant={isRunning ? outlineDanger : outlineSuccess}\n              >\n                {isRunning ? \"Pause\" : \"Start\"}\n              </Button>\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n        <LifeCanvas\n          cellPixelWidth={cellPixelWidth}\n          game={game}\n          intervalMillis={intervalMillis}\n          isRunning={isRunning}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}